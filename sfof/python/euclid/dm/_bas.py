# /home/sartor/pymodule/euclid/dm/_bas.py
# -*- coding: utf-8 -*-
# PyXB bindings for NM:d7a68900f0ce7cde88e1d02169e658b5d2174c35
# Generated 2014-07-24 16:26:39.931548 by PyXB version 1.2.3
# Namespace http://euclid.esa.org/schema/bas [xmlns:bas]

import pyxb
import pyxb.binding
import pyxb.binding.saxer
import io
import pyxb.utils.utility
import pyxb.utils.domutils
import sys

# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:869ae486-133e-11e4-88d8-90b11c83965f')

# Version of PyXB used to generate the bindings
_PyXBVersion = '1.2.3'
# Generated bindings are not compatible across PyXB versions
if pyxb.__version__ != _PyXBVersion:
    raise pyxb.PyXBVersionError(_PyXBVersion)

# Import bindings for namespaces imported into schema
import pyxb.binding.datatypes

# NOTE: All namespace declarations are reserved within the binding
Namespace = pyxb.namespace.NamespaceForURI(u'http://euclid.esa.org/schema/bas', create_if_missing=True)
Namespace.configureCategories(['typeBinding', 'elementBinding'])

def CreateFromDocument (xml_text, default_namespace=None, location_base=None):
    """Parse the given XML and use the document element to create a
    Python instance.

    @param xml_text An XML document.  This should be data (Python 2
    str or Python 3 bytes), or a text (Python 2 unicode or Python 3
    str) in the L{pyxb._InputEncoding} encoding.

    @keyword default_namespace The L{pyxb.Namespace} instance to use as the
    default namespace where there is no default namespace in scope.
    If unspecified or C{None}, the namespace of the module containing
    this function will be used.

    @keyword location_base: An object to be recorded as the base of all
    L{pyxb.utils.utility.Location} instances associated with events and
    objects handled by the parser.  You might pass the URI from which
    the document was obtained.
    """

    if pyxb.XMLStyle_saxer != pyxb._XMLStyle:
        dom = pyxb.utils.domutils.StringToDOM(xml_text)
        return CreateFromDOM(dom.documentElement)
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    saxer = pyxb.binding.saxer.make_parser(fallback_namespace=default_namespace, location_base=location_base)
    handler = saxer.getContentHandler()
    xmld = xml_text
    if isinstance(xmld, unicode):
        xmld = xmld.encode(pyxb._InputEncoding)
    saxer.parse(io.BytesIO(xmld))
    instance = handler.rootObject()
    return instance

def CreateFromDOM (node, default_namespace=None):
    """Create a Python instance from the given DOM node.
    The node tag must correspond to an element declaration in this module.

    @deprecated: Forcing use of DOM interface is unnecessary; use L{CreateFromDocument}."""
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    return pyxb.binding.basis.element.AnyCreateFromDOM(node, default_namespace)


# Atomic simple type: {http://euclid.esa.org/schema/bas}objectName
class objectName (pyxb.binding.datatypes.string):

    """Naming convention for object names: length between
                10 and 100, white spaces collapsed"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'objectName')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/sartor/workspace/EUCLID/svn_tot/schema/branches/challenge4/Dictionary/bas/euc-test-bas.xsd', 8, 4)
    _Documentation = u'Naming convention for object names: length between\n                10 and 100, white spaces collapsed'
objectName._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(10L))
objectName._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(100L))
objectName._InitializeFacetMap(objectName._CF_minLength,
   objectName._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'objectName', objectName)

# Atomic simple type: {http://euclid.esa.org/schema/bas}objectId
class objectId (pyxb.binding.datatypes.unsignedLong):

    """ 64 bits integers. It stores the primary key of
                any object inside Euclid data system: - 2 bytes for data centre
                identifier that produces the data, - 6 bytes for the object_id
                itself generated by the corresponding data centre.
            """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'objectId')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/sartor/workspace/EUCLID/svn_tot/schema/branches/challenge4/Dictionary/bas/euc-test-bas.xsd', 18, 4)
    _Documentation = u' 64 bits integers. It stores the primary key of\n                any object inside Euclid data system: - 2 bytes for data centre\n                identifier that produces the data, - 6 bytes for the object_id\n                itself generated by the corresponding data centre.\n            '
objectId._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', u'objectId', objectId)

# Atomic simple type: {http://euclid.esa.org/schema/bas}extObjectId
class extObjectId (pyxb.binding.datatypes.string):

    """ Simple string object identifier for external data.
            """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'extObjectId')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/sartor/workspace/EUCLID/svn_tot/schema/branches/challenge4/Dictionary/bas/euc-test-bas.xsd', 28, 4)
    _Documentation = u' Simple string object identifier for external data.\n            '
extObjectId._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', u'extObjectId', extObjectId)
